cd path ---> it will change the directory.
cd . ---> current directory.
cd .. --> parent dir
cd ~ --> home dir
cd -  --> previous directory
cd / --> root dir
pwd --> present pwd
touch file_name --> it will make the file
mkdir --> it will make the dir(folder)
rm -r dir_name or path of dir --> it will delete the dir which has content
rm dir_name(empty) or file_name --> it will delete the file of empty dir
ls --> list the content(files and folder names in the pwd)
ls -a  --> it will return all files including hidden files
cat file_name --> used to read the content of the file
gedit file_name --> it will open the file in testeditor, we can do this using open cmd also.


//Linux have three streams to transfer the data
0. stdin --> standerd input.
1. stdout --> standerd output.
2. stderr --> standerd error.
whenever we will enter command in terminal it will be standerd input
the output from the terminal in stdout, and error is stderr

for directing the output from terminal to anyfile we have to type
command need to enter > filename to store the stdout
      "     "        >>   "   "  // for storing the previous stdout along with new stdout content .
      "      "       2>    "  " // for storing the stderr

ls -la path // to list the long files.
less file_path // to read the content of the big file in the form of scrolling page in cmd
less ls -la file_name // this will give you error inorder to avoid this we will use pipelines.

pipelines : denoted by " | " used to pass one command output from terminal as a input to the other command of the terminal

ex: ls -la file_name | less : the output of ls -la file_name is the input to the less cms and the from cmd --> terminal.
similarly we can join multiple cmds using the pipelines.

echo is used to print the string entered in the terminal
ex: echo "vg" stdout  = vg

// environment varialbes 
these variables are used to store the useful information of the system including the cmds, it is start with dollar sign
ex: echo $PWD // return the present working directory.
    echo $HOME //return the home directory path
    echo $USER // return the system user name.
* env  // return the all environment variables present in the system along with the outputs.
echo $PATH // returns the all paths the system will search for the cmd entered in the terminal

sort file_name // sort based on the alphabetical order.

///////////////USER PERMISSIONS AND SYSTEM PERMISSIONS///////////////////////
as a user in the system we have certain limitation in order to access the files in the system, we can't have permission to access all the systems.
we have to require ceratin previlages to acess the files in the system. their will be different users in the system handles diffent task.
their will be diffent groups have their own specific previlages.
--> in linux root(/) is the super user which can acess most of the files.
---> ls -l : return the files names in dir includes file access permissions, file modification time. 
d | rwx| rwx | r-x    ---> the return files information contain this in the begining.
d----> directory ,if "-" is their inplace of "d" then it is file or "l" -->link.
r--> read permission, w --> write permission, x ---> executable, "-" --> nothing we cant do r,w,x.
first rwx for user, second for group, third for other user or thired party users.
using chmod we can change the r,w,x of the file or folder
ex: chmod u(user)org(group)o(others) +/- r,w,x file_name.
      chmod u+w file.txt --> it will give the write permission in user section to the file.txt,
      chmod g-w file.txt ---> it will remove the w permission in group section to the file.txt.
            o --> other user.
---> sudo : superdo command gives the root previlage to the user to acess some secure and important files
ex: cat /etc/shadow : permission denined
      sudo cat /etc/shadow : open the files














 






